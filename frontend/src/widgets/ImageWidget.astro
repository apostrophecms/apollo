---
/**
 * @typedef {Object} ImageWidget
 * @property {Object} widget - The widget data from ApostropheCMS
 * @property {Object} [imageOptions] - Optional image configuration
 * @property {string} [imageOptions.additionalClasses] - Additional CSS classes
 *
 * @component
 * @description Image widget component for ApostropheCMS. Upon image upload, the system generates
 * multiple responsive sizes automatically. Each instance of the widget can reference any image
 * from the media library with its own unique cropping and focal point settings, without
 * modifying the original. Editors can customize alt text, cropping, and focal point per instance.
 *
 * @param {ImageWidget} props
 * @returns {astro.AstroComponent} Rendered image component
 */

import {
  getAttachmentUrl,
  getAttachmentSrcset,
  getFocalPoint,
  getWidth,
  getHeight
} from '../lib/attachments.js';

const { widget, imageOptions } = Astro.props;
const placeholder = widget?.aposPlaceholder;
const image = widget?._image?.[0];

// Handle missing image gracefully
if (!placeholder && !image) {
  console.warn('Image widget: No image or placeholder provided');
}

const src = placeholder
  ? '/images/image-widget-placeholder.jpg'
  : getAttachmentUrl(image);
const srcset = placeholder ? '' : getAttachmentSrcset(image);
const objectPosition = placeholder ? 'center center' : getFocalPoint(image);
const alt = image?.alt || '';

// Only add width/height if they exist to prevent layout shift
const width = image ? getWidth(image) : undefined;
const height = image ? getHeight(image) : undefined;
const aspectRatio = width && height ? `${width}/${height}` : undefined;
---

<style>
  .img-widget {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
    aspect-ratio: var(--aspect-ratio, auto);
  }
</style>

<img
class={`img-widget mb-6 ${imageOptions?.additionalClasses || ''}`}
  src={src}
  alt={alt}
  loading="lazy"
  decoding="async"
  srcset={srcset}
  style={`
    object-position: ${objectPosition};
    ${aspectRatio ? `--aspect-ratio: ${aspectRatio};` : ''}
  `.trim()}
  width={width}
  height={height}
/>