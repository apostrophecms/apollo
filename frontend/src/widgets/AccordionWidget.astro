---
/**
 * @typedef {Object} AccordionWidget
 * @property {string} [itemBackgroundColor='white'] - Background color of accordion items
 * @property {string} [headerAlignment='left'] - Alignment of headers ('left'|'center'|'right')
 * @property {boolean} [allowMultipleOpen=false] - Whether multiple accordion items can be open simultaneously
 * @property {number} [openIndex=-1] - Index of initially open accordion item (1-based, -1 means all closed)
 * @property {Array<AccordionItem>} [items=[]] - Accordion items
 *
 * @typedef {Object} AccordionItem
 * @property {string} header - Header text for the accordion item
 * @property {string} headerColor - Color of the header text
 * @property {Object} content - Content to be displayed when item is expanded
 *
 * @component
 * @description An accessible accordion widget component for ApostropheCMS content. Allows editors
 * to create collapsible content sections with customizable styling and behavior options.
 *
 * @param {AccordionWidget} props
 * @returns {astro.AstroComponent} Rendered accordion component
 */

const { widget } = Astro.props;
import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';

const {
  itemBackgroundColor = 'white',
  headerAlignment = 'left',
  allowMultipleOpen = false,
  openIndex = -1,
  items = []
} = widget;

const convertedIndex = openIndex === -1 ? -1 : openIndex - 1;
---
<div
  class="accordion-widget mb-6"
  data-allow-multiple={allowMultipleOpen}
  role="presentation"
>
  {
    items.map((item, index) => {
      const headerId = `accordion-header-${index}`;
      const panelId = `accordion-panel-${index}`;

      return (
        <details
          class={`accordion has-background-${itemBackgroundColor}`}
          open={index === convertedIndex}
          data-accordion-item
        >
          <summary
            class={`accordion-header has-text-${headerAlignment}`}
            id={headerId}
            aria-controls={panelId}
            aria-expanded={index === convertedIndex}
            role="button"
          >
            <p class={`has-text-${item.headerColor} has-text-weight-semibold`}>
              {item.header}
            </p>
            <span class="visually-hidden">
              {index === convertedIndex ? 'Click to close' : 'Click to open'}
            </span>
          </summary>
          <div
            class="accordion-content p-4"
            id={panelId}
            aria-labelledby={headerId}
            role="region"
          >
            <div class="content">
              <AposArea area={item.content} />
            </div>
          </div>
        </details>
      );
    })
  }
</div>

<style>
  .accordion {
    border: 1px solid #dbdbdb;
    border-radius: 4px;
    margin-bottom: 1rem;
  }

  .accordion-header {
    padding: 1rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    user-select: none;
  }

  .accordion-header::after {
    content: '+';
    padding-left: 1rem;
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }

  details[open] .accordion-header::after {
    content: '-';
  }

  .accordion-content {
    border-top: 1px solid #dbdbdb;
  }

  .accordion-header p {
    width: 100%;
  }

  .accordion-header.has-text-center p {
    text-align: center;
  }

  .accordion-header.has-text-right p {
    text-align: right;
  }

  /* Hide content from screen but keep for screen readers */
  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>

<script>
/**
 * Initializes accordion functionality and sets up event listeners
 * for handling accordion interactions
 */
function initializeAccordion() {
  const accordionContainers = document.querySelectorAll('.accordion-widget');

  accordionContainers.forEach((accordionContainer) => {
    const allowMultipleOpen = accordionContainer.hasAttribute('data-allow-multiple');
    const detailsElements = Array.from(
      accordionContainer.querySelectorAll('[data-accordion-item]')
    );

    detailsElements.forEach((detailsElement) => {
      const summary = detailsElement.querySelector('summary');

      // Update ARIA states on toggle
      detailsElement.addEventListener('toggle', (event) => {
        const isOpen = detailsElement.open;
        summary.setAttribute('aria-expanded', isOpen);

        // Update screen reader text
        const srText = summary.querySelector('.visually-hidden');
        srText.textContent = isOpen ? 'Click to close' : 'Click to open';

        // Close other panels if allowMultipleOpen is false
        if (isOpen && !allowMultipleOpen) {
          detailsElements
            .filter(details => details !== detailsElement)
            .forEach(details => {
              details.open = false;
              const otherSummary = details.querySelector('summary');
              otherSummary.setAttribute('aria-expanded', 'false');
              otherSummary.querySelector('.visually-hidden').textContent = 'Click to open';
            });
        }
      });

      // Add keyboard navigation
      summary.addEventListener('keydown', (event) => {
        const key = event.key;

        if (key === 'ArrowUp' || key === 'ArrowDown') {
          event.preventDefault();
          const direction = key === 'ArrowUp' ? -1 : 1;
          const currentIndex = detailsElements.indexOf(detailsElement);
          const targetIndex = (currentIndex + direction + detailsElements.length) % detailsElements.length;
          detailsElements[targetIndex].querySelector('summary').focus();
        }
      });
    });
  });
}

// Initialize on DOM content loaded
document.addEventListener('DOMContentLoaded', initializeAccordion);

// Handle dynamically added accordions
const observer = new MutationObserver((mutations) => {
  const hasRelevantChanges = mutations.some(mutation =>
    Array.from(mutation.addedNodes).some(node =>
      node.nodeType === 1 && 
      (node.classList?.contains('accordion-widget') || node.querySelector?.('.accordion-widget'))
    )
  );

  if (hasRelevantChanges) {
    initializeAccordion();
  }
});

observer.observe(document.body, {
  childList: true,
  subtree: true
});
</script>