---
/**
* @typedef {Object} RowWidget
* @property {('single'|'two-equal'|'three-equal'|'four-equal'|'one-third-two-thirds'|
*            'two-thirds-one-third'|'quarter-half-quarter')} [columnLayout='two-equal'] - Column layout configuration
* @property {('none'|'tight'|'normal'|'wide')} [spacing='normal'] - Space between columns
* @property {('top'|'center'|'bottom')} [verticalAlignment='top'] - Vertical alignment
* @property {('left'|'center'|'right'|'space-between')} [horizontalAlignment='left'] - Horizontal alignment
* @property {('768'|'960'|'1152'|'1344')} [maxWidth] - Optional maximum width constraint
* @property {Object} columnOneContent - Content for first column
* @property {Object} [columnTwoContent] - Content for second column (layout dependent)
* @property {Object} [columnThreeContent] - Content for third column (layout dependent)
* @property {Object} [columnFourContent] - Content for fourth column (layout dependent)
*
* @component
* @description A flexible row-based layout widget for ApostropheCMS content areas.
* Supports multiple column configurations including equal-width and proportional splits,
* with customizable spacing, alignment, and width constraints.
*
* @param {RowWidget} props
* @returns {astro.AstroComponent} Rendered row layout component
*/

const { widget } = Astro.props;
import AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';

const layouts = {
  'single': {
    classes: ['is-12'],
    areas: ['columnOneContent']
  },
  'two-equal': {
    classes: ['is-12-mobile is-6-tablet', 'is-12-mobile is-6-tablet'],
    areas: ['columnOneContent', 'columnTwoContent']
  },
  'three-equal': {
    classes: ['is-12-mobile is-6-tablet is-4-desktop', 
              'is-12-mobile is-6-tablet is-4-desktop', 
              'is-12-mobile is-6-tablet is-4-desktop'],
    areas: ['columnOneContent', 'columnTwoContent', 'columnThreeContent']
  },
  'four-equal': {
    classes: ['is-12-mobile is-6-tablet is-3-desktop',
              'is-12-mobile is-6-tablet is-3-desktop',
              'is-12-mobile is-6-tablet is-3-desktop',
              'is-12-mobile is-6-tablet is-3-desktop'],
    areas: ['columnOneContent', 'columnTwoContent', 'columnThreeContent', 'columnFourContent']
  },
  'one-third-two-thirds': {
    classes: ['is-12-mobile is-4-tablet', 'is-12-mobile is-8-tablet'],
    areas: ['columnOneContent', 'columnTwoContent']
  },
  'two-thirds-one-third': {
    classes: ['is-12-mobile is-8-tablet', 'is-12-mobile is-4-tablet'],
    areas: ['columnOneContent', 'columnTwoContent']
  },
  'quarter-half-quarter': {
    classes: ['is-12-mobile is-3-tablet',
              'is-12-mobile is-6-tablet',
              'is-12-mobile is-3-tablet'],
    areas: ['columnOneContent', 'columnTwoContent', 'columnThreeContent']
  }
};

// Spacing configurations
const spacingClasses = {
  'none': 'is-gapless',
  'tight': 'is-1',
  'normal': 'is-3',
  'wide': 'is-5'
};

// Vertical alignment configurations
const verticalAlignmentClasses = {
  'top': 'is-align-items-start',
  'center': 'is-align-items-center',
  'bottom': 'is-align-items-end'
};

// Horizontal alignment configurations
const horizontalAlignmentClasses = {
  'left': 'is-justify-content-flex-start',
  'center': 'is-justify-content-center',
  'right': 'is-justify-content-flex-end',
  'space-between': 'is-justify-content-space-between'
};

const currentLayout = layouts[widget.columnLayout || 'two-equal'];
const spacingClass = spacingClasses[widget.spacing || 'normal'];
const verticalAlignClass = verticalAlignmentClasses[widget.verticalAlignment || 'top'];
const horizontalAlignClass = horizontalAlignmentClasses[widget.horizontalAlignment || 'left'];
const maxWidth = widget.maxWidth ? widget.maxWidth : '';

// Build columns classes
const columnsClasses = [
  'columns',
  spacingClass,
  verticalAlignClass,
  horizontalAlignClass,
  maxWidth,
  'mx-auto'
].filter(Boolean).join(' ');
---

<section
  class="column-layout container is-fluid mb-6"
  role="region"
  aria-label={widget.label || 'Content columns'}
>
  <div
    class={columnsClasses}
    role="presentation"
  >
    {currentLayout.areas.map((areaName, index) => (
      widget[areaName] && (
        <div
          class={`column ${currentLayout.classes[index]} editor-column`}
          data-column-index={index + 1}
          role="region"
          aria-label={`Column ${index + 1}`}
        >
          <div class="column-content">
            <AposArea area={widget[areaName]} />
          </div>
        </div>
      )
    ))}
  </div>
</section>


<style>
.max-width-768 { max-width: 768px; }
.max-width-960 { max-width: 960px; }
.max-width-1152 { max-width: 1152px; }
.max-width-1344 { max-width: 1344px; }
</style>
